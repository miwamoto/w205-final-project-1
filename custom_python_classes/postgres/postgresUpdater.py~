#!/usr/bin/env python
# -*- coding: utf-8 -*-

import psycopg2
from collections import defaultdict

class pgUpdater(object):
    """Update database in batches 

    This class should be used as a context so that its database
    connection will be released gracefully. If not in a context, the
    class will connect and disconnect on every update or batch of updates.
    
    When the context is left, the class will dump all values in its
    buffer to the database. The user can manually dump the buffer, as
    well."""

    def __init__(self, table, database = "pittsburgh", user = 'postgres',
                 password = 'postgres', host = 'localhost',
                 port = '5432'):

        self.database = database
        self.table = table
        self.user = user
        self.password = password
        self.host = host
        self.port = port

        self.in_context = False
        self.conn = None
        self.cur = None


    def __enter__(self):
        """Open psql connection when entering context"""
        self.in_context = True
        self.connect()
        return self


    def __exit__(self, *args):
        """Safely close psql connection when exiting context"""
        try:
            self.dump_buffer()
        finally:
            self.conn.close()
        return False


    def reset(self, word):
        self.conn.rollback()


    def dump_buffer(self):
        pass


    def connect(self):
        if self.conn is None or self.conn.closed == 1:
            self.conn = psycopg2.connect(
                database=self.database,
                user=self.user,
                password=self.password,
                host=self.host,
                port=self.port)

        self.cur = self.conn.cursor()


    def disconnect(self):
        self.conn.close()

    
    def add(self, word_tup):
        pass


    def update_db(self, word):
        insert_string = ''
        update_string = ''
        try:
            self.cur.execute(insert_string)
        # If that fails update the value instead
        except psycopg2.IntegrityError as e:
            self.conn.rollback()
            self.cur.execute(update_string)
        # Either way, commit the changes
        finally:
            self.conn.commit()
            

if __name__ == "__main__":
    pass
