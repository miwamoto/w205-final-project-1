#!/usr/bin/env python
# -*- coding: utf-8 -*-

import psycopg2 as pg
from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT

import configparser

def main():
    # So we can read the config file
    parser = configparser.ConfigParser()
    parser.read('/home/ec2-user/credentials.config')

    try:
        database       = parser.get('POSTGRES'   , 'database')
        user           = parser.get('POSTGRES'   , 'user')
        password       = parser.get('POSTGRES'   , 'password')
        host           = parser.get('POSTGRES'   , 'host')
        port           = parser.get('POSTGRES'   , 'port')
        pittsburgh_db  = parser.get('PITTSBURGH' , 'database')
        clean_database = parser.get('PITTSBURGH' , 'clean_database')
        # table        = parser.get('PITTSBURGH' , 'table')

    except configparser.NoSectionError as e:
        print("##############################")
        print("Warning: Improperly formatted config file.")
        print("Please create a file in the ~/ directory")
        print("called `postgres_credentials.config`")
        print("with your desired database configuration details")
        print("and then run `~/setup_database.py`")
        print("##############################")
        print("")
        raise e

    try:
        conn = pg.connect(database = database,
                                user     = user,
                                password = password,
                                host     = host,
                                port     = port)

        # CREATE DATABASE can't run inside a transaction
        conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
        cur = conn.cursor()
        cur.execute("CREATE DATABASE {}".format(pittsburgh_db))
    except:
        print("Could not create {}".format(pittsburgh_db))
        conn.rollback()
    finally:
        conn.close()
        
    try:
        # Do the same for the 'clean' database
        # This is what will collect our batched data
        # CREATE DATABASE can't run inside a transaction
        conn = pg.connect(database = database,
                                user     = user,
                                password = password,
                                host     = host,
                                port     = port)

        conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
        cur = conn.cursor()
        cur.execute("CREATE DATABASE {}".format(clean_database))
    except:
        print("Could not create {}".format(clean_database))
        conn.rollback()
    finally:
        conn.close()


    # And create our metadata table
    try:
        # Connect to our new database
        conn = pg.connect(database = pittsburgh_db,
                        user     = user,
                        password = password,
                        host     = host,
                        port     = port)

        cur = conn.cursor()

        conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
        cur.execute(' CREATE TABLE metatable ( \
            file_id           TEXT PRIMARY KEY NOT NULL,\
            revision_id       TEXT             NOT NULL,\
            name              TEXT             NOT NULL,\
            metadata_modified TEXT             NOT NULL,\
            file_format       TEXT             NOT NULL,\
            url               TEXT             NOT NULL,\
            package_id        TEXT             NOT NULL,\
            resource_num      TEXT             NOT NULL)' )
        conn.commit()
    except Exception as e:
        print(e)
        conn.rollback()
    finally:
        conn.close()

if __name__ == '__main__':
    main()
